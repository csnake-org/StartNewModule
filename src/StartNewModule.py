#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# generated by wxGlade 0.5 on Sun Oct 14 16:42:54 2007 from D:\Users\Maarten\Code\Toolkit_workingCopy\cvs_toolkit\cilabResources\StartNewModule\StartNewModule.wxg

import wx
import os
import sys
import CreateNewModule

rootForTemplateFiles = ""

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, "Module Root\n")
        self.txtProjectRoot = wx.TextCtrl(self, -1, "")
        self.btnSelectProjectRoot = wx.Button(self, -1, "...")
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "\"Module Root\" should be the path to your module ( ie. ToolkitSrc/src/cilabModules for a library, ToolkitSrc/src/Apps/Plugins for a plugin or ToolkitSrc/src/Apps/Plugins/MyPlugin for a widget)", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.lblProjectName = wx.StaticText(self, -1, "Name")
        self.txtNewProjectName = wx.TextCtrl(self, -1, "")
        self.lblNewProjectType = wx.StaticText(self, -1, "Type")
        self.cmbNewProjectType = wx.ComboBox(self, -1, choices=["Library", "GIMIAS Plugin", "GIMIAS Plugin Widget"], style=wx.CB_DROPDOWN)
        self.btnCreateProject = wx.Button(self, -1, "Start new Module")
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "Users at CISTIB should consult the Scientific Development Team before creating a new module", style=wx.TE_MULTILINE|wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.OnTypingProjectRoot, self.txtProjectRoot)
        self.Bind(wx.EVT_BUTTON, self.OnSelectProjectRoot, self.btnSelectProjectRoot)
        self.Bind(wx.EVT_BUTTON, self.OnCreateNewProject, self.btnCreateProject)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("StartNewModule")
        self.SetSize((-1, 322))
        self.txtProjectRoot.SetMinSize((-1, -1))
        self.txtProjectRoot.SetToolTipString("Optional field for the root of the source tree that contains the Project Folder. CSnake will search this source tree for other projects.")
        self.btnSelectProjectRoot.SetMinSize((30, -1))
        self.txtNewProjectName.SetMinSize((-1, -1))
        self.cmbNewProjectType.SetMinSize((150, 21))
        self.cmbNewProjectType.SetSelection(0)
        self.btnCreateProject.SetToolTipString("Start a new project in the Project Folder based on a template")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        boxProjectRoot_copy = wx.BoxSizer(wx.HORIZONTAL)
        boxCreateProject = wx.BoxSizer(wx.HORIZONTAL)
        sizeNewProjectType = wx.BoxSizer(wx.HORIZONTAL)
        sizeNewProjectName = wx.BoxSizer(wx.HORIZONTAL)
        boxProjectRoot = wx.BoxSizer(wx.HORIZONTAL)
        boxProjectRoot.Add(self.label_1, 0, wx.RIGHT, 5)
        boxProjectRoot.Add(self.txtProjectRoot, 2, wx.FIXED_MINSIZE, 0)
        boxProjectRoot.Add(self.btnSelectProjectRoot, 0, 0, 0)
        sizer_1.Add(boxProjectRoot, 0, wx.EXPAND, 0)
        sizer_1.Add(self.text_ctrl_2, 0, wx.EXPAND, 2)
        sizeNewProjectName.Add(self.lblProjectName, 0, 0, 5)
        sizeNewProjectName.Add(self.txtNewProjectName, 2, 0, 5)
        boxCreateProject.Add(sizeNewProjectName, 2, wx.EXPAND, 5)
        sizeNewProjectType.Add(self.lblNewProjectType, 0, 0, 5)
        sizeNewProjectType.Add(self.cmbNewProjectType, 0, 0, 5)
        boxCreateProject.Add(sizeNewProjectType, 0, wx.EXPAND|wx.ALIGN_RIGHT, 5)
        sizer_1.Add(boxCreateProject, 0, wx.EXPAND, 0)
        sizer_1.Add(self.btnCreateProject, 0, wx.ALIGN_RIGHT, 0)
        boxProjectRoot_copy.Add(self.text_ctrl_1, 2, wx.EXPAND, 0)
        sizer_1.Add(boxProjectRoot_copy, 1, wx.EXPAND, 10)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def OnTypingProjectRoot(self, event): # wxGlade: MainFrame.<event_handler>
        event.Skip()

    def OnSelectProjectRoot(self, event): # wxGlade: MainFrame.<event_handler>
        dlg = wx.DirDialog(None, "Select Project Root Folder")
        if dlg.ShowModal() == wx.ID_OK:
            self.txtProjectRoot.SetValue(dlg.GetPath())

    def OnCreateNewProject(self, event): # wxGlade: MainFrame.<event_handler>
        if( self.cmbNewProjectType.GetValue() == "Library" ):
            CreateNewModule.CreateLibrary(self.txtProjectRoot.GetValue(), self.txtNewProjectName.GetValue(), rootForTemplateFiles)
        if( self.cmbNewProjectType.GetValue() == "GIMIAS Plugin" ):
            CreateNewModule.CreatePlugin(self.txtProjectRoot.GetValue(), self.txtNewProjectName.GetValue(), rootForTemplateFiles)
        if( self.cmbNewProjectType.GetValue() == "GIMIAS Plugin Widget" ):
            CreateNewModule.CreatePluginWidget(self.txtProjectRoot.GetValue(), self.txtNewProjectName.GetValue(), rootForTemplateFiles)
        event.Skip()

# end of class MainFrame

if __name__ == "__main__":
    # Possible resources folders
    root = os.path.dirname(sys.argv[0])
    # '/resources' for built application
    # '/../resources' for running from source
    resourceFolders = ["/resources", "/../resources"]
    for folder in resourceFolders:
        rootForTemplateFiles = root + folder
        if os.path.exists( rootForTemplateFiles ):
            break
    assert os.path.exists("%s/TemplatePlugin" % rootForTemplateFiles), "Template plugin folder not found in: %s" % rootForTemplateFiles
    assert os.path.exists("%s/TemplateLibrary" % rootForTemplateFiles), "Template library folder not found in: %s" % rootForTemplateFiles
    
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    mainFrame = MainFrame(None, -1, "")
    app.SetTopWindow(mainFrame)
    mainFrame.Show()
    app.MainLoop()
