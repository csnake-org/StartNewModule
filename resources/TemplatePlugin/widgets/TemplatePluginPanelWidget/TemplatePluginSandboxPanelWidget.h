/*
* Copyright (c) 2009,
* Computational Image and Simulation Technologies in Biomedicine (CISTIB),
* Universitat Pompeu Fabra (UPF), Barcelona, Spain. All rights reserved.
* See license.txt file for details.
*/

#ifndef _TemplatePluginSandboxPanelWidget_H
#define _TemplatePluginSandboxPanelWidget_H

#include "TemplatePluginSandboxProcessor.h"
#include "TemplatePluginSandboxPanelWidgetUI.h"

// CoreLib
#include "coreRenderingTree.h"
#include "corePointInteractorPointSelect.h"

namespace Core{ namespace Widgets {
	class AcquireDataEntityInputControl;
	class UserHelper;
	class DataEntityListBrowser;
}}
	
namespace TemplatePlugin{

/**
PanelWidget for interacting with TemplatePlugin::SandboxProcessor.

The parent class TemplatePluginSandboxPanelWidgetUI contains all the code for 
buttons, labels, layouts, etc.

The SandboxPanelWidget provides the functions that handle the GUI events 
generated by TemplatePluginSandboxPanelWidgetUI (see for example the function 
OnBtnSub).

TemplatePluginSandboxPanelWidgetUI is created with wxGlade, a graphical 
GUI editor. It is encouraged to use wxGlade for designing your widgets.

\note In Gimias there's several PanelWidgets for different processors in 
different plug-ins. All the panel widgets are disabled except the active one that will be 
enabled ( Enable() ). The active one is the one that the user clicked.
If you need to catch the event when this panel widget is enabled or disabled
overwrite the function Enable( ). Be careful when you call Enable( true ) to 
this widget because the behavior will be unpredicted.

\ingroup Template Plugin
\author Chiara Riccobene
\date 13 Dec 2009
*/
class SandboxPanelWidget : public TemplatePluginSandboxPanelWidgetUI
{

// OPERATIONS
public:
	//!
	SandboxPanelWidget(wxWindow* parent, int id);

	//!
	~SandboxPanelWidget( );

	//! Add button events to the bridge and call UpdateWidget()
	void Init(	
		SandboxProcessor::Pointer processor,
		Core::RenderingTree::Pointer tree,
		Core::Widgets::DataEntityListBrowser* listBrowser,
		Core::Widgets::UserHelper *helperWidget );
	
	//!
	bool Enable( bool enable /*= true */ );

private:
	//! Update GUI from working data
	void UpdateWidget();

	//! Update working data from GUI
	void UpdateData();

	//! Validate GUI data
	bool Validate();

	//! Button has been pressed
	void OnBtnApply(wxCommandEvent& event);

	//!
	void UpdateHelperWidget( );

	//!
	void OnModifiedInputDataEntity();

	//!
	void OnModifiedOutputDataEntity();
	
// ATTRIBUTES
private:
	//! Working data of the processor
	SandboxProcessor::Pointer m_Processor;

	//! Rendering tree
	Core::RenderingTree::Pointer m_RenderingTree;

	//! Selected data entity from the list
	Core::DataEntityHolder::Pointer m_selectedDataEntityHolder;

	//! User helper
	Core::Widgets::UserHelper *m_helperWidget;
};

} //namespace TemplatePlugin{

#endif //_TemplatePluginSandboxPanelWidget_H
