/*
* Copyright (c) 2009,
* Computational Image and Simulation Technologies in Biomedicine (CISTIB),
* Universitat Pompeu Fabra (UPF), Barcelona, Spain. All rights reserved.
* See license.txt file for details.
*/

#ifndef _TemplatePluginTemplPanelWidget_H
#define _TemplatePluginTemplPanelWidget_H

#include "TemplatePluginTemplProcessor.h"
#include "TemplatePluginTemplPanelWidgetUI.h"

// CoreLib
#include "coreRenderingTree.h"
#include "corePointInteractorPointSelect.h"
#include "coreProcessingWidget.h"

namespace Core{ namespace Widgets {
	class UserHelper;
	class DataEntityListBrowser;
}}
	
namespace TemplatePlugin{

/**
PanelWidget for interacting with TemplatePlugin::TemplProcessor.

The parent class TemplatePluginTemplPanelWidgetUI contains all the code for 
buttons, labels, layouts, etc.

The TemplPanelWidget provides the functions that handle the GUI events 
generated by TemplatePluginTemplPanelWidgetUI (see for example the function 
OnBtnSub).

TemplatePluginTemplPanelWidgetUI is created with wxGlade, a graphical 
GUI editor. It is encouraged to use wxGlade for designing your widgets.

\note In Gimias there's several PanelWidgets for different processors in 
different plug-ins. All the panel widgets are disabled except the active one that will be 
enabled ( Enable() ). The active one is the one that the user clicked.
If you need to catch the event when this panel widget is enabled or disabled
overwrite the function Enable( ). Be careful when you call Enable( true ) to 
this widget because the behavior will be unpredicted.

\ingroup Template Plugin
\author Chiara Riccobene
\date 13 Dec 2009
*/
class TemplPanelWidget : 
public TemplatePluginTemplPanelWidgetUI,
public Core::Widgets::ProcessingWidget 
{

// OPERATIONS
public:
	//!
	coreDefineBaseWindowFactory( TemplPanelWidget );
	
	//!
	TemplPanelWidget(wxWindow* parent, int id= wxID_ANY,
		const wxPoint&  pos = wxDefaultPosition, 
		const wxSize&  size = wxDefaultSize, 
		long style = 0);

	//!
	~TemplPanelWidget( );

	//! Add button events to the bridge and call UpdateWidget()
	void OnInit(  );
	
	//!
	bool Enable( bool enable /*= true */ );
	
	//!
	Core::BaseProcessor::Pointer GetProcessor( );

private:
	//! Update GUI from working data
	void UpdateWidget();

	//! Update working data from GUI
	void UpdateData();

	//! Button has been pressed
	void OnBtnApply(wxCommandEvent& event);

	//!
	void UpdateHelperWidget( );

	//!
	void OnModifiedInputDataEntity();

	//!
	void OnModifiedOutputDataEntity();
	
// ATTRIBUTES
private:
	//! Working data of the processor
	TemplProcessor::Pointer m_Processor;
};

} //namespace TemplatePlugin{

#endif //_TemplatePluginTemplPanelWidget_H
